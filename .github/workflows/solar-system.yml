name: Solar System Workflow

on: 
    workflow_dispatch: 
    push: 
        branches:
            - main
            - feature/*

env:
    MONGO_URI: ${{ vars.MONGO_URI}}
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME}}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD}}
jobs:
    unit-testing:
        strategy:
          matrix:
            operating_system: [ubuntu-latest, macos-latest]
            nodejs_version: [18]
            exclude:
              - operating_system: macos-latest
                nodejs_version: 18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: mongodb://localhost:27017/
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ${{ matrix.operating_system}}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        - name: Setup NodeJS Version
          uses: actions/setup-node@v4
          with:
            node-version: ${{ matrix.nodejs_version}}
        - name: Cache NPM Dependencies
          uses: actions/cache@v3
          with:
            path: '**/node_modules'
            key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        - name: Install dependencies
          run: npm install           
        - name: Unit Testing
          id: nodejs-unit-testing
          run: npm test
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha Test Result
            path: test-results.xml
    code-coverage:
        runs-on: ubuntu-latest
        container: 
          image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
        env:
          MONGO_URI: mongodb://mongo:27017/
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4
          # - name: Setup NodeJS Version
          #   uses: actions/setup-node@v4
          #   with:
          #     node-version: 18
          - name: Cache NPM Dependencies
            uses: actions/cache@v3
            with:
              path: '**/node_modules'
              key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          - name: Install Dependencies
            run: npm install
          - name: Check Code Coverage
            continue-on-error: true
            run: npm run coverage
          - name: Archive Test Result
            uses: actions/upload-artifact@v3
            with:
              name: Code Coverage Result
              path: coverage   
              retention-days: 1  
    Containerization:
      runs-on: ubuntu-latest
      needs: [code-coverage, unit-testing]
      permissions: 
        packages: write
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Docker Docker hub login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD}}

        - name: Docker GHCR login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN}}

              
        - name: Build Image
          uses: docker/build-push-action@v5
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-sytem:${{ github.sha}}

        - name: Docker Image Test
          run: |
               docker images
               docker run --name solarsystem-app -d \
                 -p 3000:3000 \
                 -e MONGO_URI=$MONGO_URI \
                 -e MONGO_USERNAME=$MONGO_USERNAME \
                 -e MONGO_PASSWORD=$MONGO_PASSWORD \
                    ${{ vars.DOCKERHUB_USERNAME }}/solar-sytem:${{ github.sha}}

                # export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}} solary-system-app')
                # echo $IP

                echo Testing Image URL using wget
                #curl -v http://localhost:3000/live
          
        - name: Docker push
          uses: docker/build-push-action@v5
          with:
              context: .
              push: true
              tags: |
                  ${{ vars.DOCKERHUB_USERNAME }}/solar-sytem:${{ github.sha}}
                  ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha}}
    
    dev-deploy:
      runs-on: ubuntu-latest
      needs: Containerization
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
  
        - name: Install kubectl
          uses: azure/setup-kubectl@v3
          with:
            version: 'latest'
  
        - name: Create kind cluster
          run: kind create cluster --name github-actions
  
        - name: Verify kind cluster is running
          run: kind get clusters

        - name: Export kubeconfig path
          run: kind get kubeconfig --name github-actions > $GITHUB_WORKSPACE/kubeconfig
  
        - name: Verify kubeconfig content
          run: cat $GITHUB_WORKSPACE/kubeconfig
  
        - name: Set KUBECONFIG environment variable for this job
          run: export KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig && kubectl config view
  
        - name: Get kubectl nodes
          run: export KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig && kubectl get nodes
            
        